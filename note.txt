# Styled Components

1. npm i styled-components

2. download vscode-styled-components extension

const H1 = styled.h1`       --- tagged template literals (needs to start with Uppercase)
  font-size: 30px;
  font-weight: 600;
`; 

----------------------

# Global Styles with Styled Components

import { createGlobalStyle } from "styled-components";

const GlobalStyles = createGlobalStyle``

needs to be siblings to the other siblings to take effect


## IF EXPERIENCING ERROR  --- error '{variable}' is assigned a value but never used
set the no-used-vars and react/prop-types to warn

rules: {
"no-unused-vars": "warn",
"react/prop-types": "warn",
"react/jsx-no-target-blank": "off",
"react-refresh/only-export-components": [
    "warn",
    { allowConstantExport: true },
],
},

----------------------

# Styled Components and the 'css' Function

import styled, { css } from "styled-components";

const test = css`
  text-align: center;
  ${10 > 5 && "background-color: yellow"}
`;


<Heading as="h1">The Wild Oasis</Heading>           --- use 'as' as props to set the heading to <h1> or <h2> etc


${(props) =>
props.as === "h1" &&        --- receive the props
css`
    font-size: 3rem;
    font-weight: 600;
`}

----------------------

# Building More Reusable Styled Components

Row.defaultProps = {            --- used to set defaultProps
  type: "vertical",
};

----------------------

# Building the App Layout

make sure to return a fragment <> </> to not mess up the styling

# make sure that the components are inside the app layout route

<Routes>            --- Main route
    <Route element={<AppLayout />}>
    <Route index element={<Navigate replace to="dashboard" />} />
    <Route path="dashboard" element={<Dashboard />} />
    <Route path="bookings" element={<Bookings />} />
    <Route path="cabins" element={<Cabins />} />
    <Route path="users" element={<Users />} />
    <Route path="settings" element={<Settings />} />
    <Route path="account" element={<Account />} />
</Route>

-- check the applayout, header and sidebar
----------------------

# Building the Sidebar and Main Navigation

const StyledNavLink = styled(NavLink)``              --- Use react NavLink to Styled Components       

# React Icons
npm i react-icons

----------------------

# Setting up React Query

npm i @tanstack/react-query

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 60 * 1000, // cache for 1 minute
    },
  },
});

# Install React Query Devtools

npm i @tanstack/react-query-devtools

# Check App.jsx for the implementation of the react query provider and devtools

----------------------

# Mutations: Deleting a Cabin

  const queryClient = useQueryClient();

  const { isLoading: isDeleting, mutate } = useMutation({
    mutationFn: deleteCabin,
    onSuccess: () => {
      alert("Cabin deleted successfully");
      queryClient.invalidateQueries({
        // invalidate the cache for the "cabin" query key to refetch the data
        queryKey: ["cabins"],
      });
    },
    onError: (err) => alert(err.message),
  });

----------------------

# Displaying Toast (Notification)

npm i react-hot-toast

----------------------

# React Hook-Form

npm i react-hook-form


const { register, handleSubmit } = useForm();

{...register("name")}

----------------------

# Displaying a Line Chart with the Recharts Library

npm i recharts

----------------------
